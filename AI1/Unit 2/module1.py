import sys; args = sys.argv[1:]
puzzles = open(args[0], "r").read().splitlines()
#puzzles = open("puzzles.txt", "r").read().splitlines()
import time
import random
import ast
#import copy 
# optional helper function
def select_unassigned_var(assignment, variables, neighbors):
   pv = []
   x = [len(variables[v]) for v in variables]
   m = min(x)
   for v in variables:
       if len(variables[v])== m:
           pv.append(v)
   return random.choice(pv)

# optional helper function
def ordered_domain(var_index, variables, q_table):
    t = {}
    for i in variables[var_index]:
        if i in q_table:
         t[i] = q_table[i]
        else:
            t[i] = 0
    x = {k: v for k, v in sorted(t.items(), key=lambda item: item[1])}
    return x.keys()



def isValid(value, var_index, assignment, variables, neighbors, k):
   #for i in csp_table:
   #        if var_index in i:
   #            for k in i:
   #                if assignment[k] == value:
   #                    return False
   for i in neighbors[var_index]:
       if assignment[i] == value:
           return False
   return True

# optional helper function
def update_variables(value, var_index, assignment, variables, neighbors):
   vars = {k: {v for v in vals} for k, vals in variables.items()}
   del[vars[var_index]]
   for k in neighbors[var_index]:
            if k in vars:
                   if value in vars[k]:
                    vars[k].remove(value)
   return vars
      
def solve(puzzle, neighbors):
   # initialize_ds function is optional helper function. You can change this part. 
   variables, puzzle, q_table = initialize_ds(puzzle, neighbors)  # q_table is quantity table {'1': number of value '1' occurred, ...}
   return recursive_backtracking(puzzle, variables, neighbors, q_table)

# optional helper function: you are allowed to change it
def recursive_backtracking(assignment, variables, neighbors, q_table):
   ''' Your code goes here'''
   if solution.find('.') == -1:
       return assignment
   v = select_unassigned_var(assignment,variables, neighbors)
   for i in ordered_domain(v, variables, q_table):
       if isValid(i,v,assignment,variables,neighbors) == True:
        #temp  = list(assignment)
        #temp[v] = "."
        #assignment = "".join(temp)

        #temp  = list(assignment)
        #temp[v] = i
        #assignment = "".join(temp)
        assignment1 = assignment[:v] + i + assignment[v+1:]
        vars = update_variables(i,v,assignment1,variables,neighbors)
        if i in q_table:
            q_table[i] +=1
        else:
            q_table[i] = 1
        result = recursive_backtracking(assignment1,vars,neighbors, q_table)
        if result != None:
               return result
        #temp  = list(assignment)
        #temp[v] = "."
        #assignment = "".join(temp)
   return None

def sudoku_csp():
     a = [[0, 1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17],[18, 19, 20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 32, 33, 34, 35],[36, 37, 38, 39, 40, 41, 42, 43, 44], [45, 46, 47, 48, 49, 50, 51, 52, 53],[54, 55, 56, 57, 58, 59, 60, 61, 62], [63, 64, 65, 66, 67, 68, 69, 70, 71],[72, 73, 74, 75, 76, 77, 78, 79, 80], [0, 9, 18, 27, 36, 45, 54, 63, 72],[1, 10, 19, 28, 37, 46, 55, 64, 73], [2, 11, 20, 29, 38, 47, 56, 65, 74],[3, 12, 21, 30, 39, 48, 57, 66, 75], [4, 13, 22, 31, 40, 49, 58, 67, 76],[5, 14, 23, 32, 41, 50, 59, 68, 77], [6, 15, 24, 33, 42, 51, 60, 69, 78],[7, 16, 25, 34, 43, 52, 61, 70, 79], [8, 17, 26, 35, 44, 53, 62, 71, 80],[0, 1, 2, 9, 10, 11, 18, 19, 20], [3, 4, 5, 12, 13, 14, 21, 22, 23],[6, 7, 8, 15, 16, 17, 24, 25, 26], [27, 28, 29, 36, 37, 38, 45, 46, 47],[30, 31, 32, 39, 40, 41, 48, 49, 50], [33, 34, 35, 42, 43, 44, 51, 52, 53],[54, 55, 56, 63, 64, 65, 72, 73, 74], [57, 58, 59, 66, 67, 68, 75, 76, 77],[60, 61, 62, 69, 70, 71, 78, 79, 80]]
     
     

def sudoku_neighbors(csp_table): # {0:[0, 1, 2, 3, 4, ...., 8, 9, 18, 27, 10, 11, 19, 20], 1:
   ''' Your code goes here '''
   return {0: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 72, 10, 11, 18, 19, 20, 27, 36, 45, 54, 63}, 1: {0, 1, 2, 3, 4, 5, 6, 7, 8, 64, 10, 73, 9, 11, 18, 19, 20, 28, 37, 46, 55}, 2: {0, 1, 2, 3, 4, 5, 6, 7, 8, 65, 74, 11, 9, 10, 18, 19, 20, 29, 38, 47, 56}, 3: {0, 1, 2, 3, 4, 5, 6, 7, 8, 66, 75, 12, 13, 14, 21, 22, 23, 30, 39, 48, 57}, 4: {0, 1, 2, 3, 4, 5, 6, 7, 8, 67, 76, 13, 12, 14, 21, 22, 23, 31, 40, 49, 58}, 5: {0, 1, 2, 3, 4, 5, 6, 7, 8, 68, 12, 77, 14, 13, 21, 22, 23, 32, 41, 50, 59}, 6: {0, 1, 2, 3, 4, 5, 6, 7, 8, 69, 78, 15, 16, 17, 24, 25, 26, 33, 42, 51, 60}, 7: {0, 1, 2, 3, 4, 5, 6, 7, 8, 70, 79, 16, 15, 17, 24, 25, 26, 34, 43, 52, 61}, 8: {0, 1, 2, 3, 4, 5, 6, 7, 8, 71, 15, 80, 17, 16, 24, 25, 26, 35, 44, 53, 62}, 9: {0, 1, 2, 72, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 36, 45, 54, 63}, 10: {64, 1, 0, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 73, 19, 18, 20, 28, 37, 46, 55}, 11: {0, 65, 2, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 74, 18, 20, 19, 29, 38, 47, 56}, 12: {66, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 75, 21, 22, 23, 30, 39, 48, 57}, 13: {67, 4, 3, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 76, 21, 22, 23, 31, 40, 49, 58}, 14: {3, 68, 5, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 77, 21, 22, 23, 32, 41, 50, 59}, 15: {69, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 78, 24, 25, 26, 33, 42, 51, 60}, 16: {70, 7, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 79, 24, 25, 26, 34, 8, 43, 52, 61}, 17: {6, 71, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 80, 24, 25, 26, 35, 7, 44, 53, 62}, 18: {0, 1, 2, 72, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 45, 54, 63}, 19: {64, 1, 0, 2, 73, 10, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 37, 46, 55}, 20: {0, 65, 2, 1, 9, 74, 11, 10, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 38, 47, 56}, 21: {66, 3, 4, 5, 75, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 39, 48, 57}, 22: {67, 4, 3, 5, 76, 13, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 40, 49, 58}, 23: {3, 68, 5, 4, 12, 77, 14, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 41, 50, 59}, 24: {69, 6, 7, 8, 78, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 42, 51, 60}, 25: {70, 7, 6, 8, 79, 16, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 17, 34, 43, 52, 61}, 26: {6, 71, 8, 7, 15, 80, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 16, 35, 44, 53, 62}, 27: {0, 72, 9, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 54, 63}, 28: {64, 1, 73, 10, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 55}, 29: {65, 2, 74, 11, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 56}, 30: {66, 3, 75, 12, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 57}, 31: {67, 4, 76, 13, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 58}, 32: {68, 5, 77, 14, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 59}, 33: {69, 6, 78, 15, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 51, 52, 53, 60}, 34: {70, 7, 79, 16, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 51, 52, 53, 61}, 35: {71, 8, 80, 17, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 51, 52, 53, 62}, 36: {0, 72, 9, 18, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 63}, 37: {64, 1, 73, 10, 19, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55}, 38: {65, 2, 74, 11, 20, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56}, 39: {66, 3, 75, 12, 21, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 57}, 40: {67, 4, 76, 13, 22, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 58}, 41: {68, 5, 77, 14, 23, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 59}, 42: {69, 6, 78, 15, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 60}, 43: {70, 7, 79, 16, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 61}, 44: {71, 8, 80, 17, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 62}, 45: {0, 72, 9, 18, 27, 28, 29, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63}, 46: {64, 1, 73, 10, 19, 27, 28, 29, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55}, 47: {65, 2, 74, 11, 20, 27, 28, 29, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56}, 48: {66, 3, 75, 12, 21, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57}, 49: {67, 4, 76, 13, 22, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58}, 50: {68, 5, 77, 14, 23, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59}, 51: {69, 6, 78, 15, 24, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60}, 52: {70, 7, 79, 16, 25, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61}, 53: {71, 8, 80, 17, 26, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 62}, 54: {0, 64, 65, 72, 9, 73, 74, 18, 27, 36, 45, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}, 55: {64, 1, 65, 72, 73, 10, 74, 19, 28, 37, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}, 56: {64, 65, 2, 72, 73, 74, 11, 20, 29, 38, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}, 57: {66, 3, 67, 68, 75, 12, 76, 77, 21, 30, 39, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62}, 58: {66, 67, 4, 68, 75, 76, 13, 77, 22, 31, 40, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62}, 59: {66, 67, 68, 5, 75, 76, 77, 14, 23, 32, 41, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62}, 60: {69, 6, 70, 71, 78, 15, 79, 80, 24, 33, 42, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62}, 61: {69, 70, 7, 71, 78, 79, 16, 80, 25, 34, 43, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62}, 62: {69, 70, 71, 8, 78, 79, 80, 17, 26, 35, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62}, 63: {64, 65, 66, 67, 68, 69, 70, 71, 0, 9, 72, 73, 74, 18, 27, 36, 45, 54, 55, 56, 63}, 64: {64, 65, 66, 67, 68, 69, 70, 71, 1, 73, 10, 72, 74, 19, 28, 37, 46, 54, 55, 56, 63}, 65: {64, 65, 66, 67, 68, 69, 70, 71, 2, 72, 74, 11, 73, 20, 29, 38, 47, 54, 55, 56, 63}, 66: {64, 65, 66, 67, 68, 69, 70, 71, 3, 75, 12, 76, 77, 21, 30, 39, 48, 57, 58, 59, 63}, 67: {64, 65, 66, 67, 68, 69, 70, 71, 4, 75, 76, 13, 77, 22, 31, 40, 49, 57, 58, 59, 63}, 68: {64, 65, 66, 67, 68, 69, 70, 71, 5, 75, 76, 77, 14, 23, 32, 41, 50, 57, 58, 59, 63}, 69: {64, 65, 66, 67, 68, 69, 70, 71, 6, 78, 15, 79, 80, 24, 33, 42, 51, 60, 61, 62, 63}, 70: {64, 65, 66, 67, 68, 69, 70, 71, 7, 78, 79, 16, 80, 25, 34, 43, 52, 60, 61, 62, 63}, 71: {64, 65, 66, 67, 68, 69, 70, 71, 8, 78, 79, 80, 17, 26, 35, 44, 53, 60, 61, 62, 63}, 72: {0, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 9, 18, 27, 36, 45, 54, 55, 56, 63}, 73: {64, 1, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 10, 19, 28, 37, 46, 54, 55, 56, 63}, 74: {64, 65, 2, 72, 73, 74, 75, 76, 77, 78, 79, 80, 11, 20, 29, 38, 47, 54, 55, 56, 63}, 75: {66, 3, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 12, 21, 30, 39, 48, 57, 58, 59}, 76: {66, 67, 4, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 13, 22, 31, 40, 49, 57, 58, 59}, 77: {66, 67, 68, 5, 72, 73, 74, 75, 76, 77, 78, 79, 80, 14, 23, 32, 41, 50, 57, 58, 59}, 78: {69, 6, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 15, 24, 33, 71, 42, 51, 60, 61, 62}, 79: {69, 70, 7, 72, 73, 74, 75, 76, 77, 78, 79, 80, 16, 25, 34, 71, 43, 52, 60, 61, 62}, 80: {69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 8, 17, 26, 35, 44, 53, 60, 61, 62}}

# Optional helper function
def initialize_ds(puzzle, neighbors):
   ''' Your code goes here '''
   vars = {}
   q = {}
   for i in range(len(puzzle)):
       if puzzle[i] == ".":
           vars[i] = {'1','2','3','4','5','6','7','8','9'}
           for k in neighbors[i]:
                       if puzzle[k] != ".":
                           if puzzle[k] in vars[i]:
                            vars[i].remove(puzzle[k])
                           if puzzle[k] in q:
                               q[puzzle[k]]+=1
                           else:
                               q[puzzle[k]] = 1
   #print (vars, puzzle, q_table) 
   return vars, puzzle, q


# sum of all ascii code of each char - (length of the solution * ascii code of min char)
def checksum(solution):
   ''' write your code here'''
   #if solution.find('.') == -1:
   #    return 324
   #else:
   #     return 0
   return sum(ord(ch) for ch in solution) - len(solution) * ord(min(solution))

def main():
   csp = input("Given Killer Sodoku Csp: ")
   csp_table = sudoku_csp()   # rows, cols, and sub_blocks
   neighbors = sudoku_neighbors(csp_table)# each position p has its neighbors {p:[positions in same row/col/subblock], ...}
   #print(neighbors)
   start_time = time.time()
   for line, puzzle in enumerate(puzzles):
      line, puzzle = line+1, puzzle.rstrip()
      print ("{}: {}".format(line, puzzle)) 
      solution = solve(puzzle, neighbors)
      if solution == None:print ("No solution found."); break
      print ("{}{} {}".format(" "*(len(str(line))+2), solution, checksum(solution)))
   print ("Duration:", (time.time() - start_time))

if __name__ == '__main__': main()
# Required comment: Your name, Period #, 2022
# Check the example below. You must change the line below before submission.
# Satvik Matta, Period 5, 2023

